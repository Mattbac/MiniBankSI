<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Scan for property file -->
	<context:property-placeholder location="classpath:META-INF/prop.properties" />

	<!-- Scan for component -->
	<context:component-scan base-package="com.projet"/>
	
	<!-- Detect @ -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<mvc:annotation-driven/>

	<!-- Transaction Manager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Entity Manager Factory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- Provider -->
		<property name="persistenceProvider">
	        <bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
	    </property>
		<!-- Persistence Unit -->
		<property name="persistenceUnitName" value="persistenceUnit" />
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"></property>
		<property name="jpaProperties">
        	<props>
        		<prop key="hibernate.dialect">${jdbc.dialect}</prop>
<!--         		<prop key="hibernate.default_schema">${jdbc.schema}</prop> -->
        	</props>
        </property>
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>


	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/assets/**" location="/assets/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- Encoder -->
	<!--<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="12" />
	</bean>-->
	
	<security:http auto-config="true">
		<security:intercept-url pattern="/login" access="permitAll" />
		<security:intercept-url pattern="/counselor*" access="hasAnyRole('counselor', 'manager')" />
		<security:intercept-url pattern="/manager*" access="hasAnyRole('manager')" />
		<security:form-login
		  login-page='/login'
		  login-processing-url="/login"
		  authentication-failure-url="/login.html?error=true"/>
		<security:csrf disabled="true"/>
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider>
<!-- 		<security:password-encoder ref="encoder" />  -->

			<security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="SELECT user_login, user_password, user_enabled FROM user WHERE user_login = ?" 
				authorities-by-username-query="SELECT user.user_login, role.role_name FROM user, role WHERE user_login = ?" />
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>